import java.util.*;
class Solution {
    int[][] gidung;
    int[][] bo;

	 public int[][] solution(int n, int[][] build_frame) {
		gidung = new int[n+1][n+1];
		bo = new int[n+1][n+1];

		for (int bf[] : build_frame) {
			int x = bf[0];
			int y = bf[1];
			int a = bf[2]; 
			int b = bf[3];
			if (b == 1 && canBuild(a, x, y)) {
				//생성
				if (a == 0) {					
					//기둥
					gidung[y][x] = 1;
				}
				else {
					//보
					bo[y][x] = 1;
				}
			} 
			else if (b == 0 && !checkDelete(a, x, y)) {
				//삭제
				if (a == 0) {
					//기둥
					gidung[y][x] = 1;
				}
				else {
					//보
					bo[y][x] = 1;
				}
					
			}
		}
		
		ArrayList<int[]> arr = new ArrayList<>();
		
		for (int j = 0; j < n+1; j++) {
			for (int i = 0; i < n+1; i++) {
				if (gidung[i][j] == 1) {
					int a[] = new int[3];
					a[0] = j;
					a[1] = i;
					a[2] = 0;
					arr.add(a);
				}
				if (bo[i][j] == 1) {
					int a[] = new int[3];
					a[0] = j;
					a[1] = i;
					a[2] = 1;
					arr.add(a);
				}
			}
		}
		int[][] answer = new int[arr.size()][3];
		for (int i = 0; i < arr.size(); i++)
			answer[i] = arr.get(i);
		return answer;
	}

	 boolean canBuild(int a, int x, int y) {
		if (a == 0) {
			//기둥
			if (y == 0)
				return true;
			if (gidung[y - 1][x] == 1)
				return true;
			if (bo[y][x] == 1)
				return true;
			if (x != 0 && bo[y][x - 1] == 1)
				return true;
		}
		if (a == 1) {
			//보
			if (y == 0)
				return false;
			if (gidung[y - 1][x] == 1 || gidung[y - 1][x + 1] == 1)
				return true;
			if (x - 1 < 0 || x + 1 >= gidung.length)
				return false;
			if (bo[y][x - 1] == 1 && bo[y][x + 1] == 1)
				return true;
		}

		return false;
	}

	 boolean checkDelete(int a, int x, int y) {

		if (a == 0) {
			//기둥
			gidung[y][x] = 0;
			if (y + 1 < gidung.length && gidung[y + 1][x] == 1 && !canBuild(0, x, y + 1))
				return false;
			if (bo[y + 1][x] == 1 && !canBuild(1, x, y + 1))
				return false;
			if (x - 1 >= 0 && bo[y + 1][x - 1] == 1 && !canBuild(1, x - 1, y + 1))
				return false;

		} 
		else if (a == 1) {
			//보
			bo[y][x] = 0;
			if (gidung[y][x] == 1 && !canBuild(0, x, y))
				return false;
			if (x + 1 < gidung.length && gidung[y][x + 1] == 1 && !canBuild(0, x + 1, y))
				return false;
			if (x - 1 >= 0 && bo[y][x - 1] == 1 && !canBuild(1, x - 1, y))
				return false;
			if (x + 1 < gidung.length && bo[y][x + 1] == 1 && !canBuild(1, x + 1, y))
				return false;
		}

		return true;
	}

}
